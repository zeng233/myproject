<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- spring自带的定时器：结合JDK的线程池执行，里面可以配置自己的执行规则 -->
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="5" />
		<property name="maxPoolSize" value="10" />
		<property name="queueCapacity" value="25" />
	</bean>
	<!-- 创建这个标签spring会自动创建ThreadPoolTaskExecutor -->
	<!-- <task:executor id="executor" pool-size="10"/> -->
	

	<bean id="springTaskJob" class="com.myspring.integration.schedule.spring.TaskExecutorJob">
		<constructor-arg ref="taskExecutor" />
	</bean>
	
	<bean id="taskSchedulerJob" class="com.myspring.integration.schedule.spring.TaskSchedulerJob"/>
	<!-- 创建这个标签spring自动创建ThreadPoolTaskScheduler -->
	<task:scheduler id="myScheduler" pool-size="10" />
	<task:scheduled-tasks scheduler="myScheduler">
		<!-- 参考spring in action 14.4.1 Cron expression -->
		<!-- 指定执行某个方法 -->
		<task:scheduled ref="taskSchedulerJob" method="hello" cron="0 45 14 * * ?" />
		<!-- <task:scheduled ref="myTaskJob" method="hello" fixed-delay="1000"/> -->
	</task:scheduled-tasks>
	
	
	<!-- ============================================================================ -->
	<!-- 集成quartz -->
	<bean id="schedulerFactory"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="quartzProperties">
			<props>
				<prop key="org.quartz.scheduler.instanceName">CRMscheduler</prop>
				<prop key="org.quartz.scheduler.instanceId">AUTO</prop>
				<!-- 线程池配置 -->
				<prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
				<prop key="org.quartz.threadPool.threadCount">20</prop>
				<prop key="org.quartz.threadPool.threadPriority">1</prop>
				<!-- JobStore 配置 -->
				<prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop>
				<!-- 集群配置 -->
				<prop key="org.quartz.jobStore.isClustered">true</prop>
				<prop key="org.quartz.jobStore.clusterCheckinInterval">15000</prop>
				<prop key="org.quartz.jobStore.maxMisfiresToHandleAtATime">1</prop>
				<prop key="org.quartz.jobStore.misfireThreshold">120000</prop>
				<prop key="org.quartz.jobStore.tablePrefix">QRTZ_</prop>
			</props>
		</property>
		<property name="schedulerName" value="CMSscheduler" />
		<!--必须的，QuartzScheduler 延时启动，应用启动完后 QuartzScheduler 再启动 -->
		<property name="startupDelay" value="5" />
		<property name="applicationContextSchedulerContextKey" value="ctx" />
		<!--可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 -->
		<property name="overwriteExistingJobs" value="true" />
		<!-- 设置自动启动 -->
		<property name="autoStartup" value="true" />
		<!-- 注册触发器 -->
		<property name="triggers">
			<list>
				<!-- <ref bean="triggerA" /> -->
				<ref bean="triggerB" />
			</list>
		</property>
		<!-- 注册jobDetail -->
		<property name="jobDetails">
			<list>
				<!-- <ref bean="jobDetailA"/> -->
				<ref bean="jobDetailB"/>
			</list>
		</property>
	</bean>
	
	<bean id="triggerA" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"> 
        <property name="jobDetail" ref="jobDetailA"/> 
        <property name="cronExpression" value="30 * * * * ?"/>
    </bean> 
    
    <bean id="triggerB" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"> 
        <property name="jobDetail" ref="jobDetailB"/>
        <!-- 每分钟的30秒执行一次 -->
        <property name="cronExpression" value="0/5 * * * * ?"/>
    </bean> 
	
	<!-- <bean id="jobA" class="com.myspring.integration.schedule.quartz.ClusterJobA"/> -->
	<!-- <bean id="jobDetailA" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="jobA"/> 
        <property name="targetMethod" value="run"/> 
		<property name="shouldRecover" value="true"/> 
	</bean> -->
	
	<bean id="jobDetailA" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass">
			<value>com.myspring.integration.schedule.quartz.ClusterJobA</value>
		</property>
		<property name="durability" value="true" />
	</bean>
	
	<bean id="jobDetailB" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass">
			<value>com.myspring.integration.schedule.quartz.ClusterJobB</value>
		</property>
		<property name="durability" value="true" />
	</bean>
	
	<bean id="jobC" class="com.myspring.integration.schedule.quartz.MethodClusterJob"/>
	<bean id="jobDetailC" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="jobC"></property>
		<property name="targetMethod" value="query"></property>
	</bean>
</beans>
